package com.ctel.controller;

import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ctel.model.User;
import com.ctel.model.UserRequest;
import com.ctel.model.UserResponse;
//import com.ctel.securityUtil.JwtUtil;
import com.ctel.service.UserService;

@RestController

@EnableAutoConfiguration
//@CrossOrigin("http://localhost:4200/")
@CrossOrigin("http://localhost:3000")
public class UserController {

	@Autowired
	UserService userservice;
//
//	@Autowired
//	private JwtUtil util;
//
//	@Autowired
//	private AuthenticationManager authenticationManager;

	@PostMapping("/insert")
	public User saveuser(@RequestBody User user) {
		userservice.insert(user);
		System.out.println(user);
		return user;

	}

	@GetMapping("/all")
	public List<User> getAlluser() {
		List<User> user = userservice.findAll();
		return user;
	}

	@GetMapping("/users/{userId}")
	public Optional<User> getbyuserId(@PathVariable("userId") int userId) {
		return userservice.getUser(userId);
	}

	@SuppressWarnings("unlikely-arg-type")
	@PutMapping("/update")
	public User UpdatebyId(@RequestBody User user) {
		if ("".equals(user.getUserId())) {
			return null;
		}
		return userservice.update(user);
	}

	@DeleteMapping("/delete/{userId}")
	private void deleteBook(@PathVariable("userId") int userId) {
		userservice.delete(userId);
	}

//	@PostMapping("/login")
//	public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest request) {
//		// validate un/pwd with database
//		authenticationManager
//				.authenticate(new UsernamePasswordAuthenticationToken(request.getEmailId(), request.getPassword()));
//
//		String token = util.generateToken(request.getEmailId());
//		return ResponseEntity.ok(new UserResponse(token, "Success! Generated By Token"));
//	}
//
//	// 3. after login only
//	@PostMapping("/welcome")
//	public ResponseEntity<String> accessData(Principal p) {
//		return ResponseEntity.ok("Hello User!" + p.getName());
//	}

}
